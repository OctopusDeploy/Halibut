sequenceDiagram
    participant Client as Request Sender Node<br/>(Client/Octopus)
    participant Redis as Redis Queue
    participant Processor as Request Processor Node<br/>(Tentacle)
    participant Service as Target Service

    Note over Client, Service: DataStream Upload Progress Reporting in Redis Queue

    %% Initial Request Setup
    Client->>Client: Create RequestMessage with DataStreams
    Client->>Client: PrepareRequest(): Switch DataStreams to not report progress<br/>Create HeartBeatDrivenDataStreamProgressReporter
    Client->>Redis: Store RequestMessage and DataStreams
    Client->>Redis: Push request GUID to queue
    Client->>Client: Start NodeHeartBeatSender (RequestSenderNode)<br/>Sends empty heartbeats
    Client->>Client: Start NodeHeartBeatWatcher<br/>Subscribe to RequestProcessorNode heartbeats

    %% Request Processing
    Processor->>Redis: DequeueAsync() - Pop request GUID
    Processor->>Redis: TryGetAndRemoveRequest() - Get and remove request
    Processor->>Processor: ReadRequest(): Create RedisDataStreamTransferProgressRecorder<br/>for each DataStream
    Processor->>Processor: Start NodeHeartBeatSender (RequestProcessorNode)<br/>Builds heartbeats with DataStream progress
    Processor->>Processor: Start watching RequestSenderNode heartbeats

    %% DataStream Upload with Progress Reporting
    loop For each DataStream
        Processor->>Service: Upload DataStream chunk
        Service-->>Processor: Chunk uploaded
        Processor->>Processor: RedisDataStreamTransferProgressRecorder.Progress()<br/>Update copiedSoFar counter
        
        %% Heartbeat with Progress
        Processor->>Processor: HeartBeatMessage.Build(dataStreamsTransferProgress)<br/>Create heartbeat with progress data
        Processor->>Redis: SendNodeHeartBeat() - Publish to heartbeat channel<br/>JSON: {"DataStreamProgress": {"streamId": bytesUploaded}}
        
        %% Progress Notification
        Redis->>Client: Heartbeat message via subscription
        Client->>Client: NodeHeartBeatWatcher receives heartbeat
        Client->>Client: Deserialize HeartBeatMessage
        Client->>Client: HeartBeatDrivenDataStreamProgressReporter.HeartBeatReceived()
        Client->>Client: Call original DataStream progress callback<br/>dataStreamWithTransferProgress.DataStreamTransferProgress.Progress()
    end

    %% Request Completion
    Processor->>Service: Complete RPC call
    Service-->>Processor: Return response
    Processor->>Redis: Store response
    Processor->>Redis: Publish response available notification
    Processor->>Processor: Stop heartbeat sender
    
    Client->>Redis: Receive response notification
    Client->>Redis: Get response
    Client->>Client: Stop heartbeat sender and watcher
    Client-->>Client: Return response to caller

    Note over Client, Service: Key Components:
    Note over Client, Service: • HeartBeatMessage contains DataStreamProgress dictionary
    Note over Client, Service: • RedisDataStreamTransferProgressRecorder tracks upload progress
    Note over Client, Service: • HeartBeatDrivenDataStreamProgressReporter forwards progress to original callbacks
    Note over Client, Service: • NodeHeartBeatSender/Watcher handle bidirectional heartbeat communication
